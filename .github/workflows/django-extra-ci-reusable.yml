# for details information, see at the bottom

name: Django coverage and security check

on:
  workflow_call:

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  # post-django-ci:

  #   runs-on: ubuntu-latest

  #   needs: django-ci
  #   if: always() 
  #   steps:
  #   - name: CI tests failed - new issue
  #     if: ${{ needs.django-ci.result != 'success' }}
  #     uses: nashmaniac/create-issue-action@v1.1
  #     with:
  #       title: CI tests failure for the commit - ${{ github.event.head_commit.message }}
  #       token: ${{secrets.GITHUB_TOKEN}}
  #       assignees: ${{github.actor}}
  #       labels: worflow-failed
  #       body: 

  coverage:

    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 100
      COVERAGE_TOTAL: 100

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov

    - name: pytester-cov
      id: pytester-cov
      uses: alexanderdamiani/pytester-cov@v1.2.1
      with:
        pytest-root-dir: '.'
        cov-omit-list: 'core/*, */admin.py, */apps.py, manage.py, **/__init__.py, */tests/**, blog/*, portfolio/views.py'
        cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
        cov-threshold-total: ${{ env.COVERAGE_TOTAL }}

    - name: Coverage single fail - new issue
      if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Pytest coverage single falls below minimum ${{ env.COVERAGE_SINGLE }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: ${{ steps.pytester-cov.outputs.output-table }}

    - name: Coverage single fail - exit
      if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-single-fail }}"
        exit 1

    - name: Coverage total fail - new issue
      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Pytest coverage total falls below minimum ${{ env.COVERAGE_TOTAL }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: ${{ steps.pytester-cov.outputs.output-table }}

    - name: Coverage total fail - exit
      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
        exit 1

    - name: Commit pytest coverage table
      uses: peter-evans/commit-comment@v1
      with:
        body: ${{ steps.pytester-cov.outputs.output-table }}

  security-check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Scan Django settings for security issues
      id: check
      run: |
        python manage.py check --deploy --fail-level ERROR &> output.txt
    - id: results
      run: |
        OUTPUT=$(cat output.txt)
        FORMATTED=${OUTPUT//$'\n'/%0A}
        echo ::set-output name=file::**Django Security Check identified issues:** %0A$FORMATTED
    - name: Comment with output
      uses: peter-evans/commit-comment@v1
      with:
        body: ${{ steps.results.outputs.file }}

  post-django-security-check:

    runs-on: ubuntu-latest

    needs: security-check
    if: always() 
    steps:
    - name: CI tests failed - new issue
      if: ${{ needs.security-check.result != 'success' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Security check failure for the commit - ${{ github.event.head_commit.message }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: Check the comment associated with the commit

# List of the jobs:
#   - "post-django-ci" creates an issue if "django-test-reusable" failed 
#     (unused because outputs generated by a called workflow can't be accessed by the caller workflow and pass to another called workflow)
#   - "coverage" runs the coverage on all files recursively from the pytest-root-dir
#     It is also configured to exit with error if individual file minimum coverage or total pytest minimumm coverage are not met
#     If it exits with error, an issue is created. 
#     If it succeeds, a comment is added to the commit in GitHub with the pytest --cov markdown table
#     Variables to set:
#       * pytester action:
#         * pytest-root-dir: top-level directory to recursively check all .py files for pytest --cov
#         * cov-omit-list: comma separated str of all files and/or dirs to ignore
#       * env:
#         * cov-threshold-single: minimum individual file coverage required
#         * cov-threshold-total: minimum total coverage required
#     Action outputs:
#       * output-table: `pytest --cov` markdown output table
#       * cov-threshold-single-fail: `false` if any single file coverage less than `cov-threshold-single`, else `true`
#       * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#   - "security-check" runs a security check on Django
#     It is greatly inspired from victoriadrake/django-security-check@master (not used because I need to change the installed modules)
#   - "post-django-security-check" creates an issue if "security-check" failed
