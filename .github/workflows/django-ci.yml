# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Django complete tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  django-ci:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 parameterized
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate
    - name: Test a connection to Django (sanity check)
      run: python manage.py test core/
    - name: run apps unit and integration tests
      run: |
        python manage.py test blog/tests/
        python manage.py test portfolio/tests/


# The next job creates an issue if the former job faiiled

  post-django-ci:

    runs-on: ubuntu-latest

    needs: django-ci
    if: always() 
    steps:
    - name: CI tests failed - new issue
      if: ${{ needs.django-ci.result != 'success' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: CI tests failure for the commit - ${{ github.event.head_commit.message }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: 


# The next job runs the coverage on all files recursively from the pytest-root-dir
# It is also configured to exit with error if individual file minimum coverage or total pytest minimumm coverage are not met
# If it exits with error, an issue is created. If it succeeds, a comment is added to the commit in GitHub with the pytest --cov markdown table
#
# Variables to set:
#   * pytester action:
#     * pytest-root-dir: top-level directory to recursively check all .py files for pytest --cov
#     * cov-omit-list: comma separated str of all files and/or dirs to ignore
#   * env:
#     * cov-threshold-single: minimum individual file coverage required
#     * cov-threshold-total: minimum total coverage required
#
# Action outputs:
#   * output-table: `pytest --cov` markdown output table
#   * cov-threshold-single-fail: `false` if any single file coverage less than `cov-threshold-single`, else `true`
#   * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#
# Workflows used:
#   * actions/checkout@v2: checkout files to perform additional actions on
#   * alexanderdamiani/pytester-cov@v1.0.0: runs pytest --cov and associated functions
#   * nashmaniac/create-issue-action@v1.1: creates issue for repo
#   * peter-evans/commit-comment@v1: adds a comment to the commit in GitHub
        
  coverage:

    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 100
      COVERAGE_TOTAL: 100

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov

    - name: pytester-cov
      id: pytester-cov
      uses: alexanderdamiani/pytester-cov@v1.2.1
      with:
        pytest-root-dir: '.'
        cov-omit-list: 'core/*, */admin.py, */apps.py, manage.py, **/__init__.py, */tests/**, blog/*, portfolio/views.py'
        cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
        cov-threshold-total: ${{ env.COVERAGE_TOTAL }}

    - name: Coverage single fail - new issue
      if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Pytest coverage single falls below minimum ${{ env.COVERAGE_SINGLE }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: ${{ steps.pytester-cov.outputs.output-table }}

    - name: Coverage single fail - exit
      if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-single-fail }}"
        exit 1

    - name: Coverage total fail - new issue
      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Pytest coverage total falls below minimum ${{ env.COVERAGE_TOTAL }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: ${{ steps.pytester-cov.outputs.output-table }}

    - name: Coverage total fail - exit
      if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
      run: |
        echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
        exit 1

    - name: Commit pytest coverage table
      uses: peter-evans/commit-comment@v1
      with:
        body: ${{ steps.pytester-cov.outputs.output-table }}

# The next job runs a security check on Django
  security-check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Scan Django settings for security issues
      id: check
      # Greatly inspired from victoriadrake/django-security-check@master (not used because I need to change the installed modules)
      run: |
        python manage.py check --deploy --fail-level ERROR &> output.txt
    - id: results
      run: |
        OUTPUT=$(cat output.txt)
        FORMATTED=${OUTPUT//$'\n'/%0A}
        echo ::set-output name=file::**Django Security Check identified issues:** %0A$FORMATTED
    - name: Comment with output
      uses: peter-evans/commit-comment@v1
      with:
        body: ${{ steps.results.outputs.file }}
    # - name: error if ERROR or CRITICAL
    #   if: contains(steps.results.outputs.file, 'ERROR') || contains(steps.results.outputs.file, 'CRITICALS')
    #   run: |
    #     echo "security issues detected"
    #     exit 1

# The next job creates an issue if the former job faiiled

  post-django-security-check:

    runs-on: ubuntu-latest

    needs: security-check
    if: always() 
    steps:
    - name: CI tests failed - new issue
      if: ${{ needs.security-check.result != 'success' }}
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Security check failure for the commit - ${{ github.event.head_commit.message }}
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: worflow-failed
        body: Check the comment associated with the commit
